<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>go interface详解</title>
    <link href="/2020/09/22/go-interface/"/>
    <url>/2020/09/22/go-interface/</url>
    
    <content type="html"><![CDATA[<h3 id="1-interface是一种类型"><a href="#1-interface是一种类型" class="headerlink" title="1.interface是一种类型"></a>1.interface是一种类型</h3><p>​    interface是一种具有一组方法的类型，一个类型实现了interface的所有方法，我们说类型实现了该inteface</p><h3 id="2-interface变量存储值"><a href="#2-interface变量存储值" class="headerlink" title="2.interface变量存储值"></a>2.interface变量存储值</h3>  <pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-keyword">type</span> Human <span class="hljs-keyword">struct</span> &#123;    name  <span class="hljs-keyword">string</span>    age   <span class="hljs-keyword">int</span>    phone <span class="hljs-keyword">string</span>&#125;<span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;    Human    school <span class="hljs-keyword">string</span>    loan   <span class="hljs-keyword">float32</span>&#125;<span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;    Human    company <span class="hljs-keyword">string</span>    money   <span class="hljs-keyword">float32</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h Human)</span> <span class="hljs-title">SayHi</span><span class="hljs-params">()</span></span> &#123;    fmt.Printf(<span class="hljs-string">&quot;Hi, I am %s you can call me on %s\n&quot;</span>, h.name, h.phone)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h Human)</span> <span class="hljs-title">Sing</span><span class="hljs-params">(lyrics <span class="hljs-keyword">string</span>)</span></span> &#123;    fmt.Println(<span class="hljs-string">&quot;La la la la...&quot;</span>, lyrics)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Employee)</span> <span class="hljs-title">SayHi</span><span class="hljs-params">()</span></span> &#123;    fmt.Printf(<span class="hljs-string">&quot;Hi, I am %s, I work at %s. Call me on %s\n&quot;</span>, e.name, e.company, e.phone)&#125;<span class="hljs-keyword">type</span> Men <span class="hljs-keyword">interface</span> &#123;    SayHi()    Sing(lyrics <span class="hljs-keyword">string</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    mike := Student&#123;Human&#123;<span class="hljs-string">&quot;Mike&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;222-222-XXX&quot;</span>&#125;, <span class="hljs-string">&quot;MIT&quot;</span>, <span class="hljs-number">0.00</span>&#125;    paul := Student&#123;Human&#123;<span class="hljs-string">&quot;Paul&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;111-222-XXX&quot;</span>&#125;, <span class="hljs-string">&quot;Harvard&quot;</span>, <span class="hljs-number">100</span>&#125;    sam := Employee&#123;Human&#123;<span class="hljs-string">&quot;Sam&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&quot;444-222-XXX&quot;</span>&#125;, <span class="hljs-string">&quot;Golang Inc.&quot;</span>, <span class="hljs-number">1000</span>&#125;    tom := Employee&#123;Human&#123;<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&quot;222-444-XXX&quot;</span>&#125;, <span class="hljs-string">&quot;Things Ltd.&quot;</span>, <span class="hljs-number">5000</span>&#125;    <span class="hljs-keyword">var</span> m, p, s, t Men = mike, paul, sam, tom    m.SayHi()    p.SayHi()    s.SayHi()    t.SayHi()&#125;</code></pre><p>多种类型实现了某个接口，这些类型的值都可以直接使用interface的变量存储</p><h3 id="3-interface类型断言"><a href="#3-interface类型断言" class="headerlink" title="3.interface类型断言"></a>3.interface类型断言</h3><p>​    em代表interface类型的变量，T代表断言的类型，value是interface变量存储值，ok：bool类型</p><pre><code class="hljs go"><span class="hljs-keyword">if</span> t, ok := i.(*S); ok &#123;    fmt.Println(<span class="hljs-string">&quot;s implements I&quot;</span>, t)&#125;</code></pre><h3 id="4-空interface"><a href="#4-空interface" class="headerlink" title="4.空interface"></a>4.空interface</h3><p>​    空的interface可以接受任何类型作为参数</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doSthing</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span>&#123;&#125;</code></pre><p>​    参数v可以接受任何类型，但是函数被调用时在函数内部不代表任何类型，因为go在执行时传递给函数的任何类型都自动转换成interface{}</p><p>​    那么一个interface{的slice是否可以接受任何类型的slice？</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printAll</span><span class="hljs-params">(vals []<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;     <span class="hljs-keyword">for</span> _, val := <span class="hljs-keyword">range</span> vals &#123;        fmt.Println(val)    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    names := []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;stanley&quot;</span>, <span class="hljs-string">&quot;david&quot;</span>, <span class="hljs-string">&quot;oscar&quot;</span>&#125;    printAll(names)&#125;</code></pre><p>​    执行之后会报错，因为interface{}会占用两个字长的存储空间，一个是自身的method数据，一个是指向其存储值的指针，因而slice []interface的长度是固定的N*2,但是[]T的长度是 <code>N\*sizeof(T)</code>，两者的实际存储值是有区别的。</p><p>​    但是我们也能手动转换</p><pre><code class="hljs go"><span class="hljs-keyword">var</span> dataSlice []<span class="hljs-keyword">int</span> = foo()<span class="hljs-keyword">var</span> interfaceSlice []<span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-built_in">len</span>(dataSlice))<span class="hljs-keyword">for</span> i, d := <span class="hljs-keyword">range</span> dataSlice &#123;    interfaceSlice[i] = d&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>4_opengl</title>
    <link href="/2020/08/18/4-opengl/"/>
    <url>/2020/08/18/4-opengl/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>UEFI模式下安装Ubuntu系统</title>
    <link href="/2020/08/18/3-ueei-ubuntudownload/"/>
    <url>/2020/08/18/3-ueei-ubuntudownload/</url>
    
    <content type="html"><![CDATA[<p>有的电脑不适合这种方法，可以百度查找legacy模式安装ubuntu方法基本差不多，个别地方的设置不同。</p><ol><li><p>分区（50GB）</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVpgH.md.jpg"></p><p>图片说这个20G的分区还不能用，其实这样就可以了（因为这个方法是用EFI模式下安装ubuntu），就留着这20G未分配就好了。实际操作中我们还要将这20G改成50G，也就是分配出50G的空间。<br>对分区还不大懂得，可以百度，百度中有更详细的步骤。</p></li><li><p>关闭电脑的快速启动</p><p>windows设置-&gt;系统-&gt;电源和睡眠-&gt;其他电源设置-&gt;选择电源按钮的功能-&gt;更改当前不可用的设置-&gt;把快速启动前的√去掉 保存即可。</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVS8e.md.png"></p></li><li><p>关闭security boot</p><p>先进入BIOS界面（每个电脑的进入方式不一样，具体百度)</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVPKA.md.png"></p><p>确保BOOT是UEFI模式，然后将Secure Boot改成disable，保存设置然后退出。</p><p><img src="https://s1.ax1x.com/2020/08/19/dlViDI.md.png"></p></li><li><p>插入U盘从U盘启动，安装ubuntu</p><p>然后就是在bios界面下的UEFI模式下选择U盘启动，legacy底下的那些不要选，一定要选UEFI下的USB1-UEFI。</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVV58.md.png"></p><p>然后就看到下面的画面，选择第二个</p><p><img src="https://s1.ax1x.com/2020/08/19/dlV9vd.png"></p></li><li><p>系统安装界面设置</p><p>选择中文点击继续，第二界面两个选项都不勾选点继续，第三界面选其他选项，点击继续。</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVAVP.md.png"></p><p>这时候就能看到刚刚分区的50G空间(52430MB),点击+号创建分区</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVEUf.md.png"></p><p>按照图片指示创建,创建到最后一个分区，把所有的容量都给他</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVePS.jpg"></p><p>分区创建好了以后，一定要改启动引导，默认的引导是错的，要改成之前我们创建的那个efi系统分区</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVFbt.md.jpg"></p><p>剩下的按照常识点就完事了，密码设置短一些。安装完系统后，拔掉U盘，重启电脑。再进入BTOS界面，把secure boot打开，也就是改成enable。</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVm8g.md.png"></p><p>重启电脑，看到这个界面就说明安装成功了。</p><p><img src="https://s1.ax1x.com/2020/08/19/dlVn2Q.md.png"></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在注册表添加自定义快速启动程序</title>
    <link href="/2020/08/18/2-register/"/>
    <url>/2020/08/18/2-register/</url>
    
    <content type="html"><![CDATA[<p>进入下图中的地址，添加一个.exe，在项值中输入地址即可</p><p><img src="https://s1.ax1x.com/2020/08/19/dlk7iF.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FTP的安装与配置(centos)</title>
    <link href="/2020/08/18/1-ftp/"/>
    <url>/2020/08/18/1-ftp/</url>
    
    <content type="html"><![CDATA[<ol><li><p>安装vsftpd，直接yum 安装就可以了</p><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y vsftpd</code></pre></li><li><p>出现下图表示下载成功</p><img src="https://s1.ax1x.com/2020/08/18/dnfuse.png" style="zoom:150%;" /></li><li><p>相关配置文件</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/etc/vsftpd</span><span class="hljs-string">/etc/vsftpd/vsftpd.conf</span> <span class="hljs-string">//</span>主配置文件，核心配置文件<span class="hljs-string">/etc/vsftpd/ftpusers</span> <span class="hljs-string">//</span>黑名单，这个里面的用户不允许访问FTP服务器<span class="hljs-string">/etc/vsftpd/user_list</span> <span class="hljs-string">//</span>白名单，允许访问FTP服务器的用户列表</code></pre></li><li><p>启动服务</p><pre><code class="hljs awk">systemctl enable vsftpd.service <span class="hljs-regexp">//</span>设置开机自启动systemctl start vsftpd.service <span class="hljs-regexp">//</span>启动ftp服务netstat -antup | grep ftp <span class="hljs-regexp">//</span>查看ftp服务端</code></pre><img src="https://s1.ax1x.com/2020/08/18/dnfQZd.png" style="zoom:100%;" /><p>开通ftp服务对应的防火墙端口:21,然后登录ftp</p><img src="https://s1.ax1x.com/2020/08/18/dnfZRK.png" style="zoom:130%;" /></li><li><p>配置本地用戶登录</p><ol><li><p>ftp用户登录</p><pre><code class="hljs nginx"><span class="hljs-attribute">useradd</span> ftptest   <span class="hljs-comment">#创建ftptest用户</span>passwd ftptest    <span class="hljs-comment">#修改ftptest用户密码</span></code></pre><img src="https://s1.ax1x.com/2020/08/18/dnfnMD.png" style="zoom:150%;" /></li><li><p>修改/etc/vsftpd/vsftpd.conf</p><pre><code class="hljs routeros">anonymous <span class="hljs-attribute">enable</span>=<span class="hljs-literal">NO</span><span class="hljs-attribute">local_enable</span>=<span class="hljs-literal">YES</span></code></pre><img src="https://s1.ax1x.com/2020/08/18/dnfVG6.png" style="zoom:150%;" /></li><li><p>通过lftp连接到ftp服务器</p><img src="https://s1.ax1x.com/2020/08/18/dnfKqH.png" style="zoom:150%;" /></li></ol></li></ol><p>​                                                  本文转载自<a href="https://help.aliyun.com/knowledge_detail/60152.html">https://help.aliyun.com/knowledge_detail/60152.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
